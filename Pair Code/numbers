use bool
use list
use calls

1 is list true nil
2 is pair 0 1
NaN is pair nil nil

inc x is 
	if x
	then if head x
		then list false inc tail x
		else list true tail x
	else 1

dec x is
	if tail x
	then if head x
		then list false tail x
		else list true dec tail x
	else 0

sum x y is 
	if x
	then if y
		then list 
			xor head x head y
			if both head x head y
				inc sum tail x tail y
				sum tail x tail y
		else x
	else y

shorten x is
	if neither head x tail x
	then nil
	else x

normalize x is
	both x
	shorten pair head x normalize tail x

subtract x y is
	if not y x
	shorten pair
		xor head x head y
		if both not head x head y
			then dec subtract tail x tail y
			else subtract tail x tail y

half x is tail x

double x is
	both x
	pair 0 x

mult x y is
	both y
	if head y
		sum double mult x half y x
	else double mult x half y

sqr x is mult x x
cb x is mult mult x x x

pow x y is
	if not y then 1
	else mult pow x dec y x

fastpow x y is
	if not y then 1
	else if head y 
		then mult x sqr fastpow x half y 
		else sqr fastpow x half y

< is pair 0 1
> is pair 1 0
= is pair 0 0

compareInner x y comparedTails is
	if not eq comparedTails = then comparedTails
	if both head x not head y >
	if both not head x head y <
	else = 

compare x y is
	if both x not y then >
	if both not x y then <
	if neither x y then =
	else compareInner x y compare tail x tail y
	
less x y is eq compare x y <
greater x y is eq compare x y >
equal x y is eq compare x y =
lessOrEqual x y is not eq compare x y >
greaterOrEqual x y is not eq compare x y <

log2 x is
	if less x 2 then 0
	else inc log2 half x

divideInner x y p2 is
	if less second p2 y
		pair double first p2 second p2
		pair inc double first p2 subtract second p2 y

divide x y is
	if less x y 
		pair 0 x
		divideInner x y divide x double y

div x y is first divide x y

mod x y is second divide x y

gcd x y is
	if not y x
	gcd y mod x y

listOfZeroes len is
	both len
	pair 0 listOfZeroes dec len

inf is pair true inf

# higher order functions

multipleApply f n is 
	if eq n 0 return function x to x
	return function x to 
		call1 multipleApply f dec n 
			call1 f x

binarySearch left right big is
	if eq left right left
	give half inc sum left right function c to
	if call1 big c
	then binarySearch left dec c big
	else binarySearch c right big

sqrt x is binarySearch 0 x function y to less x sqr y

cbrt x is binarySearch 0 x function y to less x cb y

divbs x y is binarySearch 0 x function z to less x mult y z
modbs x y is subtract x mult y divbs x y

gcdbs x y is 
	if not x y
	gcdbs modbs y x x

d2 a b is sum mult a 10 b
d3 a b c is sum mult d2 a b 10 c
d4 a b c d is sum mult d3 a b c 10 d
d5 a b c d e is sum mult d4 a b c d 10 e
d6 a b c d e f is sum mult d5 a b c d e 10 f

# list of short numbers

3 is pair T 1
4 is pair 0 2
5 is pair T 2
6 is pair 0 3
7 is pair T 3
8 is pair 0 4
9 is pair T 4
10 is pair 0 5
11 is pair T 5
12 is pair 0 6
13 is pair T 6
14 is pair 0 7
15 is pair T 7
16 is pair 0 8
17 is pair T 8
18 is pair 0 9
19 is pair T 9
20 is pair 0 10